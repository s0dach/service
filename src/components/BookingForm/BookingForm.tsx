import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import './BookingForm.css';

interface FormData {
  name: string;
  phone: string;
  email: string;
  service: string;
  car: string;
  date: string;
  time: string;
  message: string;
}

const services = [
  '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
  '–†–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è',
  '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
  '–ö—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç',
  '–†–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏',
  '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
  '–î—Ä—É–≥–æ–µ'
];

const timeSlots = [
  '09:00', '10:00', '11:00', '12:00', '13:00', 
  '14:00', '15:00', '16:00', '17:00', '18:00'
];

const BookingForm: React.FC = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');
  
  const { register, handleSubmit, formState: { errors }, reset } = useForm<FormData>();

  const sendToTelegram = async (data: FormData) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à Telegram Bot Token –∏ Chat ID
    const BOT_TOKEN = 'YOUR_BOT_TOKEN';
    const CHAT_ID = 'YOUR_CHAT_ID';
    
    const message = `
üöó *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${data.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üìß *Email:* ${data.email}
üîß *–£—Å–ª—É–≥–∞:* ${data.service}
üöô *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* ${data.car}
üìÖ *–î–∞—Ç–∞:* ${data.date}
‚è∞ *–í—Ä–µ–º—è:* ${data.time}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${data.message || '–ù–µ —É–∫–∞–∑–∞–Ω'}
    `;

    try {
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      });

      if (response.ok) {
        return true;
      } else {
        throw new Error('Failed to send message');
      }
    } catch (error) {
      console.error('Error sending to Telegram:', error);
      return false;
    }
  };

  const onSubmit = async (data: FormData) => {
    setIsSubmitting(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram)
    try {
      // const success = await sendToTelegram(data);
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º setTimeout
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setSubmitStatus('success');
      reset();
      
      // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setSubmitStatus('idle');
      }, 5000);
    } catch (error) {
      setSubmitStatus('error');
      setTimeout(() => {
        setSubmitStatus('idle');
      }, 5000);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getTomorrowDate = () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  };

  return (
    <section id="booking" className="booking section-padding">
      <div className="container">
        <motion.div 
          className="booking__header text-center"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="heading-lg">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å</h2>
          <p className="text-lg booking__subtitle">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
          </p>
        </motion.div>

        <div className="booking__content">
          <motion.div 
            className="booking__info"
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
          >
            <h3 className="heading-md">–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</h3>
            <div className="booking__benefits">
              <div className="booking__benefit">
                <div className="booking__benefit-icon">‚ö°</div>
                <div className="booking__benefit-content">
                  <h4>–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h4>
                  <p>–û–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–æ–±–ª–µ–º—É –∑–∞ 30 –º–∏–Ω—É—Ç</p>
                </div>
              </div>
              <div className="booking__benefit">
                <div className="booking__benefit-icon">üõ°Ô∏è</div>
                <div className="booking__benefit-content">
                  <h4>–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞</h4>
                  <p>1 –≥–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤—Å–µ —Ä–∞–±–æ—Ç—ã</p>
                </div>
              </div>
              <div className="booking__benefit">
                <div className="booking__benefit-icon">üí∞</div>
                <div className="booking__benefit-content">
                  <h4>–ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã</h4>
                  <p>–ù–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö –¥–æ–ø–ª–∞—Ç</p>
                </div>
              </div>
              <div className="booking__benefit">
                <div className="booking__benefit-icon">üöó</div>
                <div className="booking__benefit-content">
                  <h4>–ü–æ–¥–º–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å</h4>
                  <p>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞</p>
                </div>
              </div>
            </div>
          </motion.div>

          <motion.div 
            className="booking__form-container"
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
          >
            <form onSubmit={handleSubmit(onSubmit)} className="booking__form">
              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="name" className="form-label">–í–∞—à–µ –∏–º—è *</label>
                  <input
                    type="text"
                    id="name"
                    className={`form-input ${errors.name ? 'form-input--error' : ''}`}
                    {...register('name', { required: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  />
                  {errors.name && <span className="form-error">{errors.name.message}</span>}
                </div>

                <div className="form-group">
                  <label htmlFor="phone" className="form-label">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                  <input
                    type="tel"
                    id="phone"
                    className={`form-input ${errors.phone ? 'form-input--error' : ''}`}
                    {...register('phone', { 
                      required: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
                      pattern: {
                        value: /^[\+]?[0-9\s\-\(\)]{10,}$/,
                        message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                      }
                    })}
                    placeholder="+7 (900) 123-45-67"
                  />
                  {errors.phone && <span className="form-error">{errors.phone.message}</span>}
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="email" className="form-label">Email</label>
                  <input
                    type="email"
                    id="email"
                    className={`form-input ${errors.email ? 'form-input--error' : ''}`}
                    {...register('email', {
                      pattern: {
                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                        message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
                      }
                    })}
                    placeholder="your@email.com"
                  />
                  {errors.email && <span className="form-error">{errors.email.message}</span>}
                </div>

                <div className="form-group">
                  <label htmlFor="service" className="form-label">–£—Å–ª—É–≥–∞ *</label>
                  <select
                    id="service"
                    className={`form-input ${errors.service ? 'form-input--error' : ''}`}
                    {...register('service', { required: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É' })}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</option>
                    {services.map((service) => (
                      <option key={service} value={service}>{service}</option>
                    ))}
                  </select>
                  {errors.service && <span className="form-error">{errors.service.message}</span>}
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="car" className="form-label">–ê–≤—Ç–æ–º–æ–±–∏–ª—å *</label>
                <input
                  type="text"
                  id="car"
                  className={`form-input ${errors.car ? 'form-input--error' : ''}`}
                  {...register('car', { required: '–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è' })}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry 2018"
                />
                {errors.car && <span className="form-error">{errors.car.message}</span>}
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="date" className="form-label">–î–∞—Ç–∞ *</label>
                  <input
                    type="date"
                    id="date"
                    className={`form-input ${errors.date ? 'form-input--error' : ''}`}
                    {...register('date', { required: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' })}
                    min={getTomorrowDate()}
                  />
                  {errors.date && <span className="form-error">{errors.date.message}</span>}
                </div>

                <div className="form-group">
                  <label htmlFor="time" className="form-label">–í—Ä–µ–º—è *</label>
                  <select
                    id="time"
                    className={`form-input ${errors.time ? 'form-input--error' : ''}`}
                    {...register('time', { required: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è' })}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                    {timeSlots.map((time) => (
                      <option key={time} value={time}>{time}</option>
                    ))}
                  </select>
                  {errors.time && <span className="form-error">{errors.time.message}</span>}
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="message" className="form-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                <textarea
                  id="message"
                  className="form-input form-textarea"
                  {...register('message')}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
                  rows={4}
                />
              </div>

              <button 
                type="submit" 
                className="btn btn-primary btn-lg booking__submit"
                disabled={isSubmitting}
              >
                {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å'}
              </button>

              {submitStatus === 'success' && (
                <div className="form-message form-message--success">
                  ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                </div>
              )}

              {submitStatus === 'error' && (
                <div className="form-message form-message--error">
                  ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º.
                </div>
              )}
            </form>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

export default BookingForm;


